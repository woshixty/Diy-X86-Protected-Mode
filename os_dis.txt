
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x0000042b memsz 0x0000042b flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x000000b0 memsz 0x000000b0 flags r--
    LOAD off    0x00003000 vaddr 0x0000a000 paddr 0x0000a000 align 2**12
         filesz 0x000038ec memsz 0x00009100 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042b  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     000000b0  00009000  00009000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000038ec  0000a000  0000a000  00003000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005800  0000d900  0000d900  000068ec  2**5
                  ALLOC
  4 .comment      0000002b  00000000  00000000  000068ec  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00006918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000002f5  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000181  00000000  00000000  00006c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000164  00000000  00000000  00006dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000244  00000000  00000000  00006f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 0000004f  00000000  00000000  00007176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e73 l       .text	00000000 gdt_desc
00007e79 l       .text	00000000 idt_desc
00007e63 l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000b000 l     O .data	00001000 page_table
0000d8e8 l     O .data	00000004 task_tss.0
0000d0e8 g     O .data	00000800 gdt_table
00010100 g     O .bss	00001000 task0_dpl3_stack
00012100 g     O .bss	00001000 task1_dpl3_stack
00007e7f g     F .text	00000016 task_0
0000d000 g     O .data	00000068 task0_tss
0000a000 g     O .data	00001000 map_phy_buffer
00007f02 g     F .text	00000129 os_init
00007e4f g       .text	00000000 timer_init
00011100 g     O .bss	00001000 task1_dpl0_stack
0000d080 g     O .data	00000068 task1_tss
00007c00 g       .text	00000000 _start
00007eab g     F .text	0000001f outb
0000d900 g       .bss	00000000 __bss_start
0000c000 g     O .data	00001000 page_dir
0000d900 g     O .bss	00001000 task0_dpl3_start
0000d8ec g       .data	00000000 _edata
00013100 g       .bss	00000000 _end
00007e95 g     F .text	00000016 task_1
0000e900 g     O .bss	00000800 idt_table
0000f100 g     O .bss	00001000 task0_dpl0_stack
00007eca g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:
  	.code16

	// 以下是代码区
 	.text
_start:
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:
	
read_self_all:
	mov $_start_32, %bx	// 告诉BIOS要读入数据的地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx		// 0x2 -> CH 表示读第2个扇区，0x0 -> CL 表示读第0个扇区
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax		// 0x40 -> AL 表示读64个扇区，0x2 -> AH 表示读磁盘 
	mov $0x80, %dx		// 表示计算机上的第一个硬盘
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all

	cli					// 禁止中断
    7c23:	fa                   	cli
	lgdt [gdt_desc]		// 将数据段描述符表加载到GDTR寄存器中
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	73 7e                	jae    7ca7 <read_self_all+0x94>
	lidt [idt_desc]		// 将中断描述符表加载到IDTR寄存器中
    7c29:	0f 01 1e             	lidtl  (%esi)
    7c2c:	79 7e                	jns    7cac <read_self_all+0x99>
	mov $1, %eax
    7c2e:	66 b8 01 00          	mov    $0x1,%ax
    7c32:	00 00                	add    %al,(%eax)
	lmsw %ax
    7c34:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c37:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	.byte 0x55, 0xaa	// BIOS引导扇区的标志

	.code32
	.text
_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs
 	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 ea 00 00 00       	call   7f02 <os_init>

	mov $page_dir, %eax		// 将页目录表的地址加载到EAX寄存器中
    7e18:	b8 00 c0 00 00       	mov    $0xc000,%eax
	mov %eax, %cr3			// 将页目录表的地址加载到CR3寄存器中
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	mov %cr4, %eax			// 读取CR4寄存器的值
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax		// 设置PSE位，表示启用大页表
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4			// 设置PSE位，表示启用大页表
    7e26:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax			// 读取CR0寄存器的值
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax	// 设置PE位，表示进入保护模式
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0			// 将修改后的值写入CR0寄存器
    7e31:	0f 22 c0             	mov    %eax,%cr0

	mov $TASK0_TSS_SEG, %ax
    7e34:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax 
    7e38:	0f 00 d8             	ltr    %eax

	push $APP_DATA_SEG
    7e3b:	6a 23                	push   $0x23
	push $task0_dpl3_start + 1024 * 4
    7e3d:	68 00 e9 00 00       	push   $0xe900
	push $0x202
    7e42:	68 02 02 00 00       	push   $0x202
	push $APP_CODE_SEG
    7e47:	6a 1b                	push   $0x1b
	push $task_0_entry
    7e49:	68 63 7e 00 00       	push   $0x7e63
	iret
    7e4e:	cf                   	iret

00007e4f <timer_init>:
	
timer_init:
	push %ds
    7e4f:	1e                   	push   %ds
	pusha
    7e50:	60                   	pusha
	mov $0x20, %al
    7e51:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e53:	e6 20                	out    %al,$0x20

	mov $KERNEL_DATA_SEG, %ax
    7e55:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e59:	8e d8                	mov    %eax,%ds

	call task_sched
    7e5b:	e8 6a 00 00 00       	call   7eca <task_sched>

	popa
    7e60:	61                   	popa
	pop %ds
    7e61:	1f                   	pop    %ds
 	iret
    7e62:	cf                   	iret

00007e63 <task_0_entry>:

task_0_entry:
	mov %ss, %ax
    7e63:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
    7e66:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e68:	8e c0                	mov    %eax,%es
	mov %ax, %gs
    7e6a:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e6c:	8e e0                	mov    %eax,%fs
	jmp task_0
    7e6e:	e9 0c 00 00 00       	jmp    7e7f <task_0>

00007e73 <gdt_desc>:
    7e73:	ff 07                	incl   (%edi)
    7e75:	e8                   	.byte 0xe8
    7e76:	d0 00                	rolb   $1,(%eax)
	...

00007e79 <idt_desc>:
    7e79:	ff 07                	incl   (%edi)
    7e7b:	00 e9                	add    %ch,%cl
	...

00007e7f <task_0>:

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;

void task_0 (void) {
    7e7f:	55                   	push   %ebp
    7e80:	89 e5                	mov    %esp,%ebp
    7e82:	83 ec 10             	sub    $0x10,%esp
    uint8_t color = 0;
    7e85:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
    for(;;) {
        color++;
    7e89:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7e8d:	83 c0 01             	add    $0x1,%eax
    7e90:	88 45 ff             	mov    %al,-0x1(%ebp)
    7e93:	eb f4                	jmp    7e89 <task_0+0xa>

00007e95 <task_1>:
}

/**
 * @brief 任务1
 */
void task_1 (void) {
    7e95:	55                   	push   %ebp
    7e96:	89 e5                	mov    %esp,%ebp
    7e98:	83 ec 10             	sub    $0x10,%esp
    uint8_t color = 0xff;
    7e9b:	c6 45 ff ff          	movb   $0xff,-0x1(%ebp)
    for (;;) {
        color--;
    7e9f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7ea3:	83 e8 01             	sub    $0x1,%eax
    7ea6:	88 45 ff             	mov    %al,-0x1(%ebp)
    7ea9:	eb f4                	jmp    7e9f <task_1+0xa>

00007eab <outb>:
        .base_limit = 0x0
    }
};

void outb(uint8_t data, uint16_t port) 
{
    7eab:	55                   	push   %ebp
    7eac:	89 e5                	mov    %esp,%ebp
    7eae:	83 ec 08             	sub    $0x8,%esp
    7eb1:	8b 55 08             	mov    0x8(%ebp),%edx
    7eb4:	8b 45 0c             	mov    0xc(%ebp),%eax
    7eb7:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7eba:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    // __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    __asm__ __volatile__("outb %[v], %[p]" : : [p] "d" (port), [v] "a" (data));
    7ebe:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7ec2:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7ec6:	ee                   	out    %al,(%dx)
}
    7ec7:	90                   	nop
    7ec8:	c9                   	leave
    7ec9:	c3                   	ret

00007eca <task_sched>:

void task_sched(void) {
    7eca:	55                   	push   %ebp
    7ecb:	89 e5                	mov    %esp,%ebp
    7ecd:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEG;

    task_tss = (task_tss == TASK0_TSS_SEG) ? TASK1_TSS_SEG: TASK0_TSS_SEG;
    7ed0:	a1 e8 d8 00 00       	mov    0xd8e8,%eax
    7ed5:	83 f8 28             	cmp    $0x28,%eax
    7ed8:	75 07                	jne    7ee1 <task_sched+0x17>
    7eda:	b8 30 00 00 00       	mov    $0x30,%eax
    7edf:	eb 05                	jmp    7ee6 <task_sched+0x1c>
    7ee1:	b8 28 00 00 00       	mov    $0x28,%eax
    7ee6:	a3 e8 d8 00 00       	mov    %eax,0xd8e8
    
    uint32_t addr[] = {0, task_tss};
    7eeb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7ef2:	a1 e8 d8 00 00       	mov    0xd8e8,%eax
    7ef7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    7efa:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7efd:	ff 28                	ljmp   *(%eax)
}
    7eff:	90                   	nop
    7f00:	c9                   	leave
    7f01:	c3                   	ret

00007f02 <os_init>:

void timer_init(void);
void os_init(void) {
    7f02:	55                   	push   %ebp
    7f03:	89 e5                	mov    %esp,%ebp
    7f05:	83 ec 10             	sub    $0x10,%esp
    outb(0x11, 0x20);
    7f08:	6a 20                	push   $0x20
    7f0a:	6a 11                	push   $0x11
    7f0c:	e8 9a ff ff ff       	call   7eab <outb>
    7f11:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);
    7f14:	68 a0 00 00 00       	push   $0xa0
    7f19:	6a 11                	push   $0x11
    7f1b:	e8 8b ff ff ff       	call   7eab <outb>
    7f20:	83 c4 08             	add    $0x8,%esp
    outb(0x20, 0x21);
    7f23:	6a 21                	push   $0x21
    7f25:	6a 20                	push   $0x20
    7f27:	e8 7f ff ff ff       	call   7eab <outb>
    7f2c:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xA1);
    7f2f:	68 a1 00 00 00       	push   $0xa1
    7f34:	6a 28                	push   $0x28
    7f36:	e8 70 ff ff ff       	call   7eab <outb>
    7f3b:	83 c4 08             	add    $0x8,%esp
    outb(1 << 2, 0x21);
    7f3e:	6a 21                	push   $0x21
    7f40:	6a 04                	push   $0x4
    7f42:	e8 64 ff ff ff       	call   7eab <outb>
    7f47:	83 c4 08             	add    $0x8,%esp
    outb(2, 0xA1);
    7f4a:	68 a1 00 00 00       	push   $0xa1
    7f4f:	6a 02                	push   $0x2
    7f51:	e8 55 ff ff ff       	call   7eab <outb>
    7f56:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0x21);
    7f59:	6a 21                	push   $0x21
    7f5b:	6a 01                	push   $0x1
    7f5d:	e8 49 ff ff ff       	call   7eab <outb>
    7f62:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xA1);
    7f65:	68 a1 00 00 00       	push   $0xa1
    7f6a:	6a 01                	push   $0x1
    7f6c:	e8 3a ff ff ff       	call   7eab <outb>
    7f71:	83 c4 08             	add    $0x8,%esp
    outb(0xFE, 0x21);
    7f74:	6a 21                	push   $0x21
    7f76:	68 fe 00 00 00       	push   $0xfe
    7f7b:	e8 2b ff ff ff       	call   7eab <outb>
    7f80:	83 c4 08             	add    $0x8,%esp
    outb(0xFF, 0xA0);
    7f83:	68 a0 00 00 00       	push   $0xa0
    7f88:	68 ff 00 00 00       	push   $0xff
    7f8d:	e8 19 ff ff ff       	call   7eab <outb>
    7f92:	83 c4 08             	add    $0x8,%esp

    int tmo = 1193180 / 100;
    7f95:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
    outb(0x36, 0x43); // 设置计数器模式
    7f9c:	6a 43                	push   $0x43
    7f9e:	6a 36                	push   $0x36
    7fa0:	e8 06 ff ff ff       	call   7eab <outb>
    7fa5:	83 c4 08             	add    $0x8,%esp
    outb(tmo & 0xFF, 0x40);
    7fa8:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7fab:	0f b6 c0             	movzbl %al,%eax
    7fae:	6a 40                	push   $0x40
    7fb0:	50                   	push   %eax
    7fb1:	e8 f5 fe ff ff       	call   7eab <outb>
    7fb6:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    7fb9:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7fbc:	c1 f8 08             	sar    $0x8,%eax
    7fbf:	0f b6 c0             	movzbl %al,%eax
    7fc2:	6a 40                	push   $0x40
    7fc4:	50                   	push   %eax
    7fc5:	e8 e1 fe ff ff       	call   7eab <outb>
    7fca:	83 c4 08             	add    $0x8,%esp

    idt_table[0x20].offset_l = (uint32_t)timer_init & 0xFFFF;
    7fcd:	b8 4f 7e 00 00       	mov    $0x7e4f,%eax
    7fd2:	66 a3 00 ea 00 00    	mov    %ax,0xea00
    idt_table[0x20].offset_h = (uint32_t)timer_init >> 16;
    7fd8:	b8 4f 7e 00 00       	mov    $0x7e4f,%eax
    7fdd:	c1 e8 10             	shr    $0x10,%eax
    7fe0:	66 a3 06 ea 00 00    	mov    %ax,0xea06
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    7fe6:	66 c7 05 02 ea 00 00 	movw   $0x8,0xea02
    7fed:	08 00 
    idt_table[0x20].attr = 0x8E00; // 0x8E表示中断门，0x00表示可读，0x1表示可执行，0x00表示非扩展段，0x1表示32位段
    7fef:	66 c7 05 04 ea 00 00 	movw   $0x8e00,0xea04
    7ff6:	00 8e 

    gdt_table[TASK0_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task0_tss;
    7ff8:	b8 00 d0 00 00       	mov    $0xd000,%eax
    7ffd:	66 a3 12 d1 00 00    	mov    %ax,0xd112
    gdt_table[TASK1_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task1_tss;
    8003:	b8 80 d0 00 00       	mov    $0xd080,%eax
    8008:	66 a3 1a d1 00 00    	mov    %ax,0xd11a
    
    page_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    800e:	b8 00 b0 00 00       	mov    $0xb000,%eax
    8013:	83 c8 07             	or     $0x7,%eax
    8016:	a3 00 c8 00 00       	mov    %eax,0xc800
    page_table[MAP_ADDR >> 12 & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    801b:	b8 00 a0 00 00       	mov    $0xa000,%eax
    8020:	83 c8 07             	or     $0x7,%eax
    8023:	a3 00 b0 00 00       	mov    %eax,0xb000
    8028:	90                   	nop
    8029:	c9                   	leave
    802a:	c3                   	ret
