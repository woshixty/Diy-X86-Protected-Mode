
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x0000038f memsz 0x0000038f flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000058 memsz 0x00000058 flags r--
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00003800 memsz 0x00004000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038f  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000058  00008000  00008000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00003800  00009000  00009000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000800  0000c800  0000c800  00005800  2**3
                  ALLOC
  4 .comment      0000002b  00000000  00000000  00005800  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00005830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000001e4  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000013e  00000000  00000000  00005a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000113  00000000  00000000  00005b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    000001ae  00000000  00000000  00005ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 0000004f  00000000  00000000  00005e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e51 l       .text	00000000 gdt_desc
00007e57 l       .text	00000000 idt_desc
00007e4f l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000a000 l     O .data	00001000 page_table
0000c000 g     O .data	00000800 gdt_table
00009000 g     O .data	00001000 map_phy_buffer
00007e7c g     F .text	00000113 os_init
00007e46 g       .text	00000000 timer_init
00007c00 g       .text	00000000 _start
00007e5d g     F .text	0000001f outb
0000c800 g       .bss	00000000 __bss_start
0000b000 g     O .data	00001000 page_dir
0000c800 g       .data	00000000 _edata
0000d000 g       .bss	00000000 _end
0000c800 g     O .bss	00000800 idt_table



Disassembly of section .text:

00007c00 <_start>:
  	.code16

	// 以下是代码区
 	.text
_start:
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:
	
read_self_all:
	mov $_start_32, %bx	// 告诉BIOS要读入数据的地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx		// 0x2 -> CH 表示读第2个扇区，0x0 -> CL 表示读第0个扇区
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax		// 0x40 -> AL 表示读64个扇区，0x2 -> AH 表示读磁盘 
	mov $0x80, %dx		// 表示计算机上的第一个硬盘
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all

	cli					// 禁止中断
    7c23:	fa                   	cli
	lgdt [gdt_desc]		// 将数据段描述符表加载到GDTR寄存器中
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	51                   	push   %ecx
    7c28:	7e 0f                	jle    7c39 <read_self_all+0x26>
	lidt [idt_desc]		// 将中断描述符表加载到IDTR寄存器中
    7c2a:	01 1e                	add    %ebx,(%esi)
    7c2c:	57                   	push   %edi
    7c2d:	7e 66                	jle    7c95 <read_self_all+0x82>
	mov $1, %eax
    7c2f:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax
    7c34:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c37:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	.byte 0x55, 0xaa	// BIOS引导扇区的标志

	.code32
	.text
_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs
 	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 64 00 00 00       	call   7e7c <os_init>

	mov $page_dir, %eax		// 将页目录表的地址加载到EAX寄存器中
    7e18:	b8 00 b0 00 00       	mov    $0xb000,%eax
	mov %eax, %cr3			// 将页目录表的地址加载到CR3寄存器中
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	mov %cr4, %eax			// 读取CR4寄存器的值
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax		// 设置PSE位，表示启用大页表
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4			// 设置PSE位，表示启用大页表
    7e26:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax			// 读取CR0寄存器的值
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax	// 设置PE位，表示进入保护模式
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0			// 将修改后的值写入CR0寄存器
    7e31:	0f 22 c0             	mov    %eax,%cr0
	
	sti
    7e34:	fb                   	sti

	push $APP_DATA_SEG
    7e35:	6a 20                	push   $0x20
	push $0
    7e37:	6a 00                	push   $0x0
	push $0x202
    7e39:	68 02 02 00 00       	push   $0x202
	push $APP_CODE_SEG
    7e3e:	6a 18                	push   $0x18
	push $task_0_entry
    7e40:	68 4f 7e 00 00       	push   $0x7e4f
	iret
    7e45:	cf                   	iret

00007e46 <timer_init>:
	
timer_init:
	push %ds
    7e46:	1e                   	push   %ds
	pusha
    7e47:	60                   	pusha
	mov $0x20, %al
    7e48:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e4a:	e6 20                	out    %al,$0x20
	popa
    7e4c:	61                   	popa
	pop %ds
    7e4d:	1f                   	pop    %ds
 	iret
    7e4e:	cf                   	iret

00007e4f <task_0_entry>:

task_0_entry:
	jmp .
    7e4f:	eb fe                	jmp    7e4f <task_0_entry>

00007e51 <gdt_desc>:
    7e51:	ff 07                	incl   (%edi)
    7e53:	00 c0                	add    %al,%al
	...

00007e57 <idt_desc>:
    7e57:	ff 07                	incl   (%edi)
    7e59:	00 c8                	add    %cl,%al
	...

00007e5d <outb>:
        .base_limit = 0x00CF
    }
};

void outb(uint8_t data, uint16_t port) 
{
    7e5d:	55                   	push   %ebp
    7e5e:	89 e5                	mov    %esp,%ebp
    7e60:	83 ec 08             	sub    $0x8,%esp
    7e63:	8b 55 08             	mov    0x8(%ebp),%edx
    7e66:	8b 45 0c             	mov    0xc(%ebp),%eax
    7e69:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7e6c:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    // __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    __asm__ __volatile__("outb %[v], %[p]" : : [p] "d" (port), [v] "a" (data));
    7e70:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7e74:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7e78:	ee                   	out    %al,(%dx)
}
    7e79:	90                   	nop
    7e7a:	c9                   	leave
    7e7b:	c3                   	ret

00007e7c <os_init>:

void timer_init(void);
void os_init(void) {
    7e7c:	55                   	push   %ebp
    7e7d:	89 e5                	mov    %esp,%ebp
    7e7f:	83 ec 10             	sub    $0x10,%esp
    outb(0x11, 0x20);
    7e82:	6a 20                	push   $0x20
    7e84:	6a 11                	push   $0x11
    7e86:	e8 d2 ff ff ff       	call   7e5d <outb>
    7e8b:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);
    7e8e:	68 a0 00 00 00       	push   $0xa0
    7e93:	6a 11                	push   $0x11
    7e95:	e8 c3 ff ff ff       	call   7e5d <outb>
    7e9a:	83 c4 08             	add    $0x8,%esp
    outb(0x20, 0x21);
    7e9d:	6a 21                	push   $0x21
    7e9f:	6a 20                	push   $0x20
    7ea1:	e8 b7 ff ff ff       	call   7e5d <outb>
    7ea6:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xA1);
    7ea9:	68 a1 00 00 00       	push   $0xa1
    7eae:	6a 28                	push   $0x28
    7eb0:	e8 a8 ff ff ff       	call   7e5d <outb>
    7eb5:	83 c4 08             	add    $0x8,%esp
    outb(1 << 2, 0x21);
    7eb8:	6a 21                	push   $0x21
    7eba:	6a 04                	push   $0x4
    7ebc:	e8 9c ff ff ff       	call   7e5d <outb>
    7ec1:	83 c4 08             	add    $0x8,%esp
    outb(2, 0xA1);
    7ec4:	68 a1 00 00 00       	push   $0xa1
    7ec9:	6a 02                	push   $0x2
    7ecb:	e8 8d ff ff ff       	call   7e5d <outb>
    7ed0:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0x21);
    7ed3:	6a 21                	push   $0x21
    7ed5:	6a 01                	push   $0x1
    7ed7:	e8 81 ff ff ff       	call   7e5d <outb>
    7edc:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xA1);
    7edf:	68 a1 00 00 00       	push   $0xa1
    7ee4:	6a 01                	push   $0x1
    7ee6:	e8 72 ff ff ff       	call   7e5d <outb>
    7eeb:	83 c4 08             	add    $0x8,%esp
    outb(0xFE, 0x21);
    7eee:	6a 21                	push   $0x21
    7ef0:	68 fe 00 00 00       	push   $0xfe
    7ef5:	e8 63 ff ff ff       	call   7e5d <outb>
    7efa:	83 c4 08             	add    $0x8,%esp
    outb(0xFF, 0xA0);
    7efd:	68 a0 00 00 00       	push   $0xa0
    7f02:	68 ff 00 00 00       	push   $0xff
    7f07:	e8 51 ff ff ff       	call   7e5d <outb>
    7f0c:	83 c4 08             	add    $0x8,%esp

    int tmo = 1193180 / 100;
    7f0f:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
    outb(0x36, 0x43); // 设置计数器模式
    7f16:	6a 43                	push   $0x43
    7f18:	6a 36                	push   $0x36
    7f1a:	e8 3e ff ff ff       	call   7e5d <outb>
    7f1f:	83 c4 08             	add    $0x8,%esp
    outb(tmo & 0xFF, 0x40);
    7f22:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f25:	0f b6 c0             	movzbl %al,%eax
    7f28:	6a 40                	push   $0x40
    7f2a:	50                   	push   %eax
    7f2b:	e8 2d ff ff ff       	call   7e5d <outb>
    7f30:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    7f33:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f36:	c1 f8 08             	sar    $0x8,%eax
    7f39:	0f b6 c0             	movzbl %al,%eax
    7f3c:	6a 40                	push   $0x40
    7f3e:	50                   	push   %eax
    7f3f:	e8 19 ff ff ff       	call   7e5d <outb>
    7f44:	83 c4 08             	add    $0x8,%esp

    idt_table[0x20].offset_l = (uint32_t)timer_init & 0xFFFF;
    7f47:	b8 46 7e 00 00       	mov    $0x7e46,%eax
    7f4c:	66 a3 00 c9 00 00    	mov    %ax,0xc900
    idt_table[0x20].offset_h = (uint32_t)timer_init >> 16;
    7f52:	b8 46 7e 00 00       	mov    $0x7e46,%eax
    7f57:	c1 e8 10             	shr    $0x10,%eax
    7f5a:	66 a3 06 c9 00 00    	mov    %ax,0xc906
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    7f60:	66 c7 05 02 c9 00 00 	movw   $0x8,0xc902
    7f67:	08 00 
    idt_table[0x20].attr = 0x8E00; // 0x8E表示中断门，0x00表示可读，0x1表示可执行，0x00表示非扩展段，0x1表示32位段
    7f69:	66 c7 05 04 c9 00 00 	movw   $0x8e00,0xc904
    7f70:	00 8e 
    
    page_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7f72:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7f77:	83 c8 07             	or     $0x7,%eax
    7f7a:	a3 00 b8 00 00       	mov    %eax,0xb800
    page_table[MAP_ADDR >> 12 & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7f7f:	b8 00 90 00 00       	mov    $0x9000,%eax
    7f84:	83 c8 07             	or     $0x7,%eax
    7f87:	a3 00 a0 00 00       	mov    %eax,0xa000
    7f8c:	90                   	nop
    7f8d:	c9                   	leave
    7f8e:	c3                   	ret
