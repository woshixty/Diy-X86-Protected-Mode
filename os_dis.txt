
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x00000423 memsz 0x00000423 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x000000b0 memsz 0x000000b0 flags r--
    LOAD off    0x00003000 vaddr 0x0000a000 paddr 0x0000a000 align 2**12
         filesz 0x000038ec memsz 0x00009100 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000423  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     000000b0  00009000  00009000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000038ec  0000a000  0000a000  00003000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005800  0000d900  0000d900  000068ec  2**5
                  ALLOC
  4 .comment      0000002b  00000000  00000000  000068ec  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00006918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000002f5  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000181  00000000  00000000  00006c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000161  00000000  00000000  00006dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000244  00000000  00000000  00006f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 0000004f  00000000  00000000  00007173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c0f l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e6b l       .text	00000000 gdt_desc
00007e71 l       .text	00000000 idt_desc
00007e4b l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000b000 l     O .data	00001000 page_table
0000d8e8 l     O .data	00000004 task_tss.0
0000d0e8 g     O .data	00000800 gdt_table
00010100 g     O .bss	00001000 task0_dpl3_stack
00012100 g     O .bss	00001000 task1_dpl3_stack
00007e77 g     F .text	00000016 task_0
0000d000 g     O .data	00000068 task0_tss
0000a000 g     O .data	00001000 map_phy_buffer
00007efa g     F .text	00000129 os_init
00007e57 g       .text	00000000 timer_init
00011100 g     O .bss	00001000 task1_dpl0_stack
0000d080 g     O .data	00000068 task1_tss
00007c00 g       .text	00000000 _start
00007ea3 g     F .text	0000001f outb
0000d900 g       .bss	00000000 __bss_start
0000c000 g     O .data	00001000 page_dir
0000d900 g     O .bss	00001000 task0_dpl3_start
0000d8ec g       .data	00000000 _edata
00013100 g       .bss	00000000 _end
00007e8d g     F .text	00000016 task_1
0000e900 g     O .bss	00000800 idt_table
0000f100 g     O .bss	00001000 task0_dpl0_stack
00007ec2 g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start:
	// x86使用段寄存器中的内容作为内存访问的基址，因此以下预先设置好
	mov $0, %ax				// 设置代码段
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds			// 设置数据段
	mov %ax, %es			// 设置数据段
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss			// 设置栈段
    7c07:	8e d0                	mov    %eax,%ss
	mov $_start, %esp		// 设置栈的起始地址
    7c09:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c0f <read_self_all>:

	// 计算机上电启动后，只取512字节到0x7c00处，即相当于自己只有个头在内存，所以下面全部出来
	// 将自己的其余部分读取到0x7E00处，即0x7c00的后512字节
read_self_all:
	mov $_start_32, %bx	// 读取到的内存地址
    7c0f:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx		// ch:磁道号，cl起始扇区号
    7c14:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x0240, %ax	// ah: 0x42读磁盘命令, al=0x40 64个扇区，多读一些, 32KB
	mov $0x80, %dx		// dh: 磁头号，dl驱动器号0x80(磁盘1)
    7c1a:	00 cd                	add    %cl,%ch
	int $0x0013
    7c1c:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all	// 读取失败，则重复

	//  加载idt和gdt表, 进入保护模式
	cli					// 关中断
    7c1f:	fa                   	cli
	lgdt gdt_desc		// 加载gdt表，原来写的是[gdt_desc]，在windows上不识别，所以改了
    7c20:	0f 01 16             	lgdtl  (%esi)
    7c23:	6b 7e 0f 01          	imul   $0x1,0xf(%esi),%edi
	lidt idt_desc		// 加载idt表，原来写的是[idt_desc]，在windows上不识别，所以改了
    7c27:	1e                   	push   %ds
    7c28:	71 7e                	jno    7ca8 <read_self_all+0x99>
	mov $1, %eax
    7c2a:	66 b8 01 00          	mov    $0x1,%ax
    7c2e:	00 00                	add    %al,(%eax)
	lmsw %ax			// 设置PE位，进入保护模式
    7c30:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32	// 进入32位保护模式代码，可以运行32位指令
    7c33:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	// 32位保护模式，位于512字节后
	.code32
	.text
_start_32:
	// 重新加载数据段寄存器
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov $_start, %esp
    7e0a:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	// 跳转到c语言中运行
	call os_init
    7e0f:	e8 e6 00 00 00       	call   7efa <os_init>

	// 打开分页机制
	mov $page_dir, %eax
    7e14:	b8 00 c0 00 00       	mov    $0xc000,%eax
	mov %eax, %cr3
    7e19:	0f 22 d8             	mov    %eax,%cr3

	mov %cr4, %eax
    7e1c:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax			// PSE位，支持4MB分页
    7e1f:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e22:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax
    7e25:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax		// 打开PG位，开启分页机制
    7e28:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e2d:	0f 22 c0             	mov    %eax,%cr0

	// 设置当前的任务0
	// 模拟中断返回，返回至任务0，特权级3模式
	mov $TASK0_TSS_SEG, %ax		// 加载任务0对应的状态段
    7e30:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax
    7e34:	0f 00 d8             	ltr    %eax

	// 下面模拟中断返回，从而实现从特权级0到特权级3的变化
	// 中断发生时，会自动压入原SS, ESP, EFLAGS, CS, EIP到栈中
	push $APP_DATA_SEG
    7e37:	6a 23                	push   $0x23
	push $task0_dpl3_stack + 1024	// 特权级3时的栈
    7e39:	68 00 05 01 00       	push   $0x10500
	push $0x202						// EFLAGS
    7e3e:	68 02 02 00 00       	push   $0x202
	push $APP_CODE_SEG				// CPL=3时的选择子
    7e43:	6a 1b                	push   $0x1b
	push $task_0_entry					// eip
    7e45:	68 4b 7e 00 00       	push   $0x7e4b
	iret							// 从中断返回，将切换至任务0
    7e4a:	cf                   	iret

00007e4b <task_0_entry>:

task_0_entry:
	// 进入任务0时，需要重设其数据段寄存器为特权级3的
	mov %ss, %ax
    7e4b:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
    7e4e:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e50:	8e c0                	mov    %eax,%es
	jmp task_0			// 跳转到任务0运行
    7e52:	e9 20 00 00 00       	jmp    7e77 <task_0>

00007e57 <timer_init>:

// 定时器0中断函数
timer_init:
	push %ds
    7e57:	1e                   	push   %ds
	pusha						// 保护现场，段寄存器不用保存
    7e58:	60                   	pusha

	mov $0x20, %al
    7e59:	b0 20                	mov    $0x20,%al
	outb %al, $0x20				// 发送EOI
    7e5b:	e6 20                	out    %al,$0x20

	// 使用内核的数据段寄存器，因为要访问内核的数据
	mov $KERNEL_DATA_SEG, %ax
    7e5d:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e61:	8e d8                	mov    %eax,%ds

	call task_sched				// 调用调试函数
    7e63:	e8 5a 00 00 00       	call   7ec2 <task_sched>
	popa						// 恢复现场
    7e68:	61                   	popa
	pop %ds
    7e69:	1f                   	pop    %ds
	iret						// 中断返回
    7e6a:	cf                   	iret

00007e6b <gdt_desc>:
    7e6b:	ff 07                	incl   (%edi)
    7e6d:	e8                   	.byte 0xe8
    7e6e:	d0 00                	rolb   $1,(%eax)
	...

00007e71 <idt_desc>:
    7e71:	ff 07                	incl   (%edi)
    7e73:	00 e9                	add    %ch,%cl
	...

00007e77 <task_0>:

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;

void task_0 (void) {
    7e77:	55                   	push   %ebp
    7e78:	89 e5                	mov    %esp,%ebp
    7e7a:	83 ec 10             	sub    $0x10,%esp
    uint8_t color = 0;
    7e7d:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
    for(;;) {
        color++;
    7e81:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7e85:	83 c0 01             	add    $0x1,%eax
    7e88:	88 45 ff             	mov    %al,-0x1(%ebp)
    7e8b:	eb f4                	jmp    7e81 <task_0+0xa>

00007e8d <task_1>:
}

/**
 * @brief 任务1
 */
void task_1 (void) {
    7e8d:	55                   	push   %ebp
    7e8e:	89 e5                	mov    %esp,%ebp
    7e90:	83 ec 10             	sub    $0x10,%esp
    uint8_t color = 0xff;
    7e93:	c6 45 ff ff          	movb   $0xff,-0x1(%ebp)
    for (;;) {
        color--;
    7e97:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7e9b:	83 e8 01             	sub    $0x1,%eax
    7e9e:	88 45 ff             	mov    %al,-0x1(%ebp)
    7ea1:	eb f4                	jmp    7e97 <task_1+0xa>

00007ea3 <outb>:
        .base_limit = 0x0
    }
};

void outb(uint8_t data, uint16_t port) 
{
    7ea3:	55                   	push   %ebp
    7ea4:	89 e5                	mov    %esp,%ebp
    7ea6:	83 ec 08             	sub    $0x8,%esp
    7ea9:	8b 55 08             	mov    0x8(%ebp),%edx
    7eac:	8b 45 0c             	mov    0xc(%ebp),%eax
    7eaf:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7eb2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    // __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    __asm__ __volatile__("outb %[v], %[p]" : : [p] "d" (port), [v] "a" (data));
    7eb6:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7eba:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7ebe:	ee                   	out    %al,(%dx)
}
    7ebf:	90                   	nop
    7ec0:	c9                   	leave
    7ec1:	c3                   	ret

00007ec2 <task_sched>:

void task_sched(void) {
    7ec2:	55                   	push   %ebp
    7ec3:	89 e5                	mov    %esp,%ebp
    7ec5:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEG;

    task_tss = (task_tss == TASK0_TSS_SEG) ? TASK1_TSS_SEG: TASK0_TSS_SEG;
    7ec8:	a1 e8 d8 00 00       	mov    0xd8e8,%eax
    7ecd:	83 f8 28             	cmp    $0x28,%eax
    7ed0:	75 07                	jne    7ed9 <task_sched+0x17>
    7ed2:	b8 30 00 00 00       	mov    $0x30,%eax
    7ed7:	eb 05                	jmp    7ede <task_sched+0x1c>
    7ed9:	b8 28 00 00 00       	mov    $0x28,%eax
    7ede:	a3 e8 d8 00 00       	mov    %eax,0xd8e8
    
    uint32_t addr[] = {0, task_tss};
    7ee3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7eea:	a1 e8 d8 00 00       	mov    0xd8e8,%eax
    7eef:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    7ef2:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7ef5:	ff 28                	ljmp   *(%eax)
}
    7ef7:	90                   	nop
    7ef8:	c9                   	leave
    7ef9:	c3                   	ret

00007efa <os_init>:

void timer_init(void);
void os_init(void) {
    7efa:	55                   	push   %ebp
    7efb:	89 e5                	mov    %esp,%ebp
    7efd:	83 ec 10             	sub    $0x10,%esp
    outb(0x11, 0x20);
    7f00:	6a 20                	push   $0x20
    7f02:	6a 11                	push   $0x11
    7f04:	e8 9a ff ff ff       	call   7ea3 <outb>
    7f09:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);
    7f0c:	68 a0 00 00 00       	push   $0xa0
    7f11:	6a 11                	push   $0x11
    7f13:	e8 8b ff ff ff       	call   7ea3 <outb>
    7f18:	83 c4 08             	add    $0x8,%esp
    outb(0x20, 0x21);
    7f1b:	6a 21                	push   $0x21
    7f1d:	6a 20                	push   $0x20
    7f1f:	e8 7f ff ff ff       	call   7ea3 <outb>
    7f24:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xA1);
    7f27:	68 a1 00 00 00       	push   $0xa1
    7f2c:	6a 28                	push   $0x28
    7f2e:	e8 70 ff ff ff       	call   7ea3 <outb>
    7f33:	83 c4 08             	add    $0x8,%esp
    outb(1 << 2, 0x21);
    7f36:	6a 21                	push   $0x21
    7f38:	6a 04                	push   $0x4
    7f3a:	e8 64 ff ff ff       	call   7ea3 <outb>
    7f3f:	83 c4 08             	add    $0x8,%esp
    outb(2, 0xA1);
    7f42:	68 a1 00 00 00       	push   $0xa1
    7f47:	6a 02                	push   $0x2
    7f49:	e8 55 ff ff ff       	call   7ea3 <outb>
    7f4e:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0x21);
    7f51:	6a 21                	push   $0x21
    7f53:	6a 01                	push   $0x1
    7f55:	e8 49 ff ff ff       	call   7ea3 <outb>
    7f5a:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xA1);
    7f5d:	68 a1 00 00 00       	push   $0xa1
    7f62:	6a 01                	push   $0x1
    7f64:	e8 3a ff ff ff       	call   7ea3 <outb>
    7f69:	83 c4 08             	add    $0x8,%esp
    outb(0xFE, 0x21);
    7f6c:	6a 21                	push   $0x21
    7f6e:	68 fe 00 00 00       	push   $0xfe
    7f73:	e8 2b ff ff ff       	call   7ea3 <outb>
    7f78:	83 c4 08             	add    $0x8,%esp
    outb(0xFF, 0xA0);
    7f7b:	68 a0 00 00 00       	push   $0xa0
    7f80:	68 ff 00 00 00       	push   $0xff
    7f85:	e8 19 ff ff ff       	call   7ea3 <outb>
    7f8a:	83 c4 08             	add    $0x8,%esp

    int tmo = 1193180 / 100;
    7f8d:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
    outb(0x36, 0x43); // 设置计数器模式
    7f94:	6a 43                	push   $0x43
    7f96:	6a 36                	push   $0x36
    7f98:	e8 06 ff ff ff       	call   7ea3 <outb>
    7f9d:	83 c4 08             	add    $0x8,%esp
    outb(tmo & 0xFF, 0x40);
    7fa0:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7fa3:	0f b6 c0             	movzbl %al,%eax
    7fa6:	6a 40                	push   $0x40
    7fa8:	50                   	push   %eax
    7fa9:	e8 f5 fe ff ff       	call   7ea3 <outb>
    7fae:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    7fb1:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7fb4:	c1 f8 08             	sar    $0x8,%eax
    7fb7:	0f b6 c0             	movzbl %al,%eax
    7fba:	6a 40                	push   $0x40
    7fbc:	50                   	push   %eax
    7fbd:	e8 e1 fe ff ff       	call   7ea3 <outb>
    7fc2:	83 c4 08             	add    $0x8,%esp

    idt_table[0x20].offset_l = (uint32_t)timer_init & 0xFFFF;
    7fc5:	b8 57 7e 00 00       	mov    $0x7e57,%eax
    7fca:	66 a3 00 ea 00 00    	mov    %ax,0xea00
    idt_table[0x20].offset_h = (uint32_t)timer_init >> 16;
    7fd0:	b8 57 7e 00 00       	mov    $0x7e57,%eax
    7fd5:	c1 e8 10             	shr    $0x10,%eax
    7fd8:	66 a3 06 ea 00 00    	mov    %ax,0xea06
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    7fde:	66 c7 05 02 ea 00 00 	movw   $0x8,0xea02
    7fe5:	08 00 
    idt_table[0x20].attr = 0x8E00; // 0x8E表示中断门，0x00表示可读，0x1表示可执行，0x00表示非扩展段，0x1表示32位段
    7fe7:	66 c7 05 04 ea 00 00 	movw   $0x8e00,0xea04
    7fee:	00 8e 

    gdt_table[TASK0_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task0_tss;
    7ff0:	b8 00 d0 00 00       	mov    $0xd000,%eax
    7ff5:	66 a3 12 d1 00 00    	mov    %ax,0xd112
    gdt_table[TASK1_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task1_tss;
    7ffb:	b8 80 d0 00 00       	mov    $0xd080,%eax
    8000:	66 a3 1a d1 00 00    	mov    %ax,0xd11a
    
    page_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    8006:	b8 00 b0 00 00       	mov    $0xb000,%eax
    800b:	83 c8 07             	or     $0x7,%eax
    800e:	a3 00 c8 00 00       	mov    %eax,0xc800
    page_table[MAP_ADDR >> 12 & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    8013:	b8 00 a0 00 00       	mov    $0xa000,%eax
    8018:	83 c8 07             	or     $0x7,%eax
    801b:	a3 00 b0 00 00       	mov    %eax,0xb000
    8020:	90                   	nop
    8021:	c9                   	leave
    8022:	c3                   	ret
