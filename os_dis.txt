
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x0000025c memsz 0x0000025c flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000038 memsz 0x00000038 flags r--
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00003800 memsz 0x00003800 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000038  00008000  00008000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00003800  00009000  00009000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      0000002b  00000000  00000000  00005800  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00005830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000145  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 000000dc  00000000  00000000  000059b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   000000ce  00000000  00000000  00005a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    0000016f  00000000  00000000  00005b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line_str 0000004f  00000000  00000000  00005cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e36 l       .text	00000000 gdt_desc
00000000 l    df *ABS*	00000000 os.c
0000a000 l     O .data	00001000 page_table
0000c000 g     O .data	00000800 gdt_table
00009000 g     O .data	00001000 map_phy_buffer
00007e3c g     F .text	00000020 os_init
00007c00 g       .text	00000000 _start
0000c800 g       .data	00000000 __bss_start
0000b000 g     O .data	00001000 page_dir
0000c800 g       .data	00000000 _edata
0000c800 g       .data	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
  	.code16

	// 以下是代码区
 	.text
_start:
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:
	
read_self_all:
	mov $_start_32, %bx	// 告诉BIOS要读入数据的地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx		// 0x2 -> CH 表示读第2个扇区，0x0 -> CL 表示读第0个扇区
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax		// 0x40 -> AL 表示读64个扇区，0x2 -> AH 表示读磁盘 
	mov $0x80, %dx		// 表示计算机上的第一个硬盘
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all

	cli					// 禁止中断
    7c23:	fa                   	cli
	lgdt [gdt_desc]		// 将数据段描述符表加载到GDTR寄存器中
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	36 7e 66             	ss jle 7c90 <read_self_all+0x7d>
	mov $1, %eax
    7c2a:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax
    7c2f:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c32:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:
	.byte 0x55, 0xaa	// BIOS引导扇区的标志

	.code32
	.text
_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs
 	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 24 00 00 00       	call   7e3c <os_init>

	mov $page_dir, %eax		// 将页目录表的地址加载到EAX寄存器中
    7e18:	b8 00 b0 00 00       	mov    $0xb000,%eax
	mov %eax, %cr3			// 将页目录表的地址加载到CR3寄存器中
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	mov %cr4, %eax			// 读取CR4寄存器的值
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax		// 设置PSE位，表示启用大页表
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4			// 设置PSE位，表示启用大页表
    7e26:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax			// 读取CR0寄存器的值
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax	// 设置PE位，表示进入保护模式
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0			// 将修改后的值写入CR0寄存器
    7e31:	0f 22 c0             	mov    %eax,%cr0
	jmp .
    7e34:	eb fe                	jmp    7e34 <_start_32+0x34>

00007e36 <gdt_desc>:
    7e36:	ff 07                	incl   (%edi)
    7e38:	00 c0                	add    %al,%al
	...

00007e3c <os_init>:
        .basehl_attr = 0x9200,  // 0x92表示数据段，0x00表示可读，0x00表示可写，0x00表示非扩展段，0x1表示32位段
        .base_limit = 0x00CF    // 0x00表示段的属性，0xCF表示段的属性，0x00表示段的属性
    }
};

void os_init(void) {
    7e3c:	55                   	push   %ebp
    7e3d:	89 e5                	mov    %esp,%ebp
    page_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7e3f:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7e44:	83 c8 07             	or     $0x7,%eax
    7e47:	a3 00 b8 00 00       	mov    %eax,0xb800
    page_table[MAP_ADDR >> 12 & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7e4c:	b8 00 90 00 00       	mov    $0x9000,%eax
    7e51:	83 c8 07             	or     $0x7,%eax
    7e54:	a3 00 a0 00 00       	mov    %eax,0xa000
    7e59:	90                   	nop
    7e5a:	5d                   	pop    %ebp
    7e5b:	c3                   	ret
