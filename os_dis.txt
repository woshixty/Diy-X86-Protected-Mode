
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000b4 memsz 0x000000b4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x0000021b memsz 0x0000021b flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000800 memsz 0x00000800 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021b  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000800  00008000  00008000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000002b  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00001830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_info   000000be  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 00000088  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line   0000009f  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_str    00000133  00000000  00000000  00001a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line_str 0000004f  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e15 l       .text	00000000 gdt_desc
00000000 l    df *ABS*	00000000 os.c
00008000 g     O .data	00000800 gdt_table
00007c00 g       .text	00000000 _start
00008800 g       .data	00000000 __bss_start
00008800 g       .data	00000000 _edata
00008800 g       .data	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
  	.code16

	// 以下是代码区
 	.text
_start:
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:
	
read_self_all:
	mov $_start_32, %bx	// 告诉BIOS要读入数据的地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx		// 0x2 -> CH 表示读第2个扇区，0x0 -> CL 表示读第0个扇区
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax		// 0x40 -> AL 表示读64个扇区，0x2 -> AH 表示读磁盘 
	mov $0x80, %dx		// 表示计算机上的第一个硬盘
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all

	cli					// 禁止中断
    7c23:	fa                   	cli
	lgdt [gdt_desc]		// 将数据段描述符表加载到GDTR寄存器中
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	15 7e 66 b8 01       	adc    $0x1b8667e,%eax
	mov $1, %eax
    7c2c:	00 00                	add    %al,(%eax)
    7c2e:	00 0f                	add    %cl,(%edi)
	lmsw %ax
    7c30:	01 f0                	add    %esi,%eax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c32:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:
	.byte 0x55, 0xaa	// BIOS引导扇区的标志

	.code32
	.text
_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs
 	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp
	jmp .
    7e13:	eb fe                	jmp    7e13 <_start_32+0x13>

00007e15 <gdt_desc>:
    7e15:	ff 07                	incl   (%edi)
    7e17:	00                   	.byte 0
    7e18:	80 00 00             	addb   $0x0,(%eax)
